}
C1[1,1]
C1[1,2]
C1[2,2]
C1[2,2]
C1[2,1]
View(C1)
C = NULL
for (i in 1:2)
{
for (j in 1:2)
{
C[i,j] = (N[1] * C1[i,j] + N[2] * C2[i,j] + N[3] * C3[i,j]) / 150
}
}
C = NULL
for (i in 1:2)
{
for (j in 1:2)
{
C[i,j] = (N[1] * as.matrix(C1[i,j]) + N[2] * as.matrix(C2[i,j]) + N[3] * as.matrix(C3[i,j]) / 150
}
}
C = NULL
for (i in 1:2)
{
for (j in 1:2)
{
C[i,j] = (N[1] * as.matrix(C1[i,j]) + N[2] * as.matrix(C2[i,j]) + N[3] * as.matrix(C3[i,j])) / 150
}
}
C1[1][1]
C1[1]
(N[1] * C1[1,1] + N[2] * C2[1,1] + N[3] * C3[1,1]) / 150
C[1,1] = (N[1] * C1[1,1] + N[2] * C2[1,1] + N[3] * C3[1,1]) / 150
C = data.frame(2,2)
View(C)
C = data.frame(c(0,0), c(0,0))
View(C)
C = data.frame(c(0,0), c(0,0))
for (i in 1:2)
{
for (j in 1:2)
{
C[i,j] = (N[1] * C1[i,j] + N[2] * C2[i,j] + N[3] * C3[i,j]) / 150
}
}
View(C)
Cinv = inv(C)
Cinv = inv(as.matrix(C))
View(Cinv)
Cinv = inv(as.matrix(C))
Cinv = as.data.frame(Cinv)
View(Cinv)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1))
View(f1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 * as.matrix(Cinv) * t(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 * as.matrix(Cinv) %*% t(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 * as.matrix(Cinv) %*% as.matrix(t(mu1))
dim(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 * as.matrix(Cinv) %*% t(as.matrix(mu1))
t(mu1)
dim(t(mu1))
dim(mu1)
dim(as.matrix(mu1))
mu1
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 * as.matrix(Cinv) %*% as.matrix(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 %*% as.matrix(Cinv) %*% t(mu1)
dim(mu1)
dim(as.matrix(mu1))
dim(as.matrix(t(mu1))
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * mu1 %*% as.matrix(Cinv) %*% t(mu1)
mu1 = as.data.frame(mu1)
View(mu1)
mu1
dim(mu1)
t(mu1)
dim(t(mu1))
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * t(mu1) %*% as.matrix(Cinv) %*% mu1
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * as.vector(t(mu1)) %*% as.matrix(Cinv) %*% as.vector(mu1)
mu1 = as.data.frame(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1))
as.vector(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * as.vector(mu1) %*% as.matrix(Cinv) %*% as.vector(t(mu1))
dim(as.vector(mu1))
as.vector(mu1) %*% as.matrix(Cinv) %*% as.vector(t(mu1))
as.matrix(t(mu1)) %*% as.matrix(Cinv)
as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1)
f1 = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1)) -
0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1) +
log(p1)
a = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1)
c = log(p1)
b = b + c
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1) + log(p1)
a = mu1 * as.matrix(Cinv) %*% as.matrix(t(X1))
f1 = a - as.matrix(b)
f1 = a - as.vector(b)
View(f1)
lda
X = dataset[c(1,2)]
View(x1)
View(X)
View(X1)
a = mu1 * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1) + log(p1)
f1 = a - as.vector(b)
View(f1)
a = mu2 * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(Cinv) %*% as.matrix(mu2) + log(p2)
f2 = a - as.vector(b)
View(f2)
a = mu1 * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1) + log(p1)
f1 = a - as.vector(b)
a = mu2 * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(Cinv) %*% as.matrix(mu2) + log(p2)
f2 = a - as.vector(b)
mu1 = c(sum(X1$Sepal.Length)/N[1], sum(X1$Sepal.Width)/N[1])
mu2 = c(sum(X2$Sepal.Length)/N[2], sum(X2$Sepal.Width)/N[2])
mu3 = c(sum(X3$Sepal.Length)/N[3], sum(X3$Sepal.Width)/N[3])
a = mu1 * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1) + log(p1)
f1 = a - as.vector(b)
View(f1)
library(MASS)
lda = lda(formula = Species ~ ., data = dataset)
dataset = as.data.frame(predict(lda, dataset))
dataset = dataset[c(5, 6, 1)]
View(dataset)
f1 = t(f1)
View(f1)
dataset = as.data.frame(predict(lda, dataset))
library(MASS)
lda = lda(formula = Species ~ ., data = dataset)
dataset = as.data.frame(predict(lda, dataset))
View(dataset)
library(datasets)
data(iris)
summary(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, col = Species)) +
geom_point()
iris$Species = factor(iris$Species, levels = c('setosa', 'versicolor', 'virginica'),
labels = c(1, 2, 3))
dataset = iris[c(1,2,5)]
View(dataset)
library(MASS)
lda = lda(formula = Species ~ ., data = dataset)
dataset = as.data.frame(predict(lda, dataset))
View(dataset)
View(f1)
p = NULL
p[1] = N[1]/nrow(dataset)
p[2] = N[2]/nrow(dataset)
p[3] = N[3]/nrow(dataset)
dim(p)
p = as.data.frame(p)
View(p)
dim(p)
dim(as.vector(p))
a = mu * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu)) %*% as.matrix(Cinv) %*% as.matrix(mu) + log(as.vector(p))
f1 = a - as.vector(b)
f1 = t(f1)
a = mu * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu)) %*% as.matrix(Cinv) %*% as.matrix(mu) +
log(as.matrix(p))
dim(as.matrix(p))
log(as.matrix(p))
0.5 * as.matrix(t(mu)) %*% as.matrix(Cinv) %*% as.matrix(mu)
mu * as.matrix(Cinv) %*% as.matrix(t(X))
0.5 * as.matrix(t(mu)) %*% as.matrix(Cinv) %*% as.matrix(mu) +
log(as.matrix(p))
a = mu * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu)) %*% as.matrix(Cinv) %*% as.matrix(mu) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
p[1]
lda
View(p)
p[,1]
p[1,1]
p[1,2]
p[2,1]
p[3,1]
p[4,1]
p = NULL
p[1] = N[1]/nrow(dataset)
p[2] = N[2]/nrow(dataset)
p[3] = N[3]/nrow(dataset)
a = mu * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu)) %*% as.matrix(Cinv) %*% as.matrix(mu) +
log(p[1])
f1 = a - as.vector(b)
View(f1)
a = mu1 * as.matrix(Cinv) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(Cinv) %*% as.matrix(mu1) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
dataset = read.csv('lda.csv')
setwd("~/Machine Learning A-Z (Codes and Datasets)/Lab2-LDA & Logistic Regression")
dataset = read.csv('lda.csv')
View(dataset)
dataset$Result = factor(dataset$Result, levels = c('P', 'F'),
labels = c(1, 2))
View(dataset)
X = dataset[c(1,2)]
View(X)
N = NULL
N[1] = length(which(dataset$Result == 1))
N[2] = length(which(dataset$Result == 2))
X1 = subset(dataset, Result == 1)
X2 = subset(dataset, Result == 2)
View(X1)
View(X2)
X1 = X1[c(1:2)]
X2 = X2[c(1:2)]
mu1 = c(sum(X1$Curvature)/N[1], sum(X1$Diameter)/N[1])
mu2 = c(sum(X2$Curvature)/N[2], sum(X2$Diameter)/N[2])
mu = c(sum(dataset$Curvature)/7, sum(dataset$Diameter)/7)
x1 = X1 - mu
x2 = X2 - mu
x3 = X3 - mu
View(x1)
View(x2)
x1 = as.matrix(X1) - as.matrix(mu)
as.matrix(X1) %-% as.matrix(mu)
mu
mu[1]
X1[, 1] - mu[1]
x1[, 1] = X1[, 1] - mu[1]
View(x1)
dataset = read.csv('lda.csv')
dataset$Result = factor(dataset$Result, levels = c('P', 'F'),
labels = c(1, 2))
X = dataset[c(1,2)]
N = NULL
N[1] = length(which(dataset$Result == 1))
N[2] = length(which(dataset$Result == 2))
X1 = subset(dataset, Result == 1)
X2 = subset(dataset, Result == 2)
X1 = X1[c(1:2)]
X2 = X2[c(1:2)]
mu1 = c(sum(X1$Curvature)/N[1], sum(X1$Diameter)/N[1])
mu2 = c(sum(X2$Curvature)/N[2], sum(X2$Diameter)/N[2])
mu = c(sum(dataset$Curvature)/7, sum(dataset$Diameter)/7)
x1[, 1] = X1[, 1] - mu[1]
x1[, 2] = X1[, 2] - mu[2]
x1 = NULL
x1[, 1] = X1[, 1] - mu[1]
x1[, 2] = X1[, 2] - mu[2]
dataset = read.csv('lda.csv')
dataset$Result = factor(dataset$Result, levels = c('P', 'F'),
labels = c(1, 2))
X = dataset[c(1,2)]
N = NULL
N[1] = length(which(dataset$Result == 1))
N[2] = length(which(dataset$Result == 2))
X1 = subset(dataset, Result == 1)
X2 = subset(dataset, Result == 2)
X1 = X1[c(1:2)]
X2 = X2[c(1:2)]
mu1 = c(sum(X1$Curvature)/N[1], sum(X1$Diameter)/N[1])
mu2 = c(sum(X2$Curvature)/N[2], sum(X2$Diameter)/N[2])
mu = c(sum(dataset$Curvature)/7, sum(dataset$Diameter)/7)
X1[, 1] = X1[, 1] - mu[1]
X1[, 2] = X1[, 2] - mu[2]
View(X1)
X2[, 1] = X2[, 1] - mu[1]
X2[, 2] = X2[, 2] - mu[2]
View(X2)
C1 = as.matrix(t(X1)) %*% as.matrix(X1) / N[1]
C1 = as.data.frame(C1)
View(C1)
C2 = as.matrix(t(X2)) %*% as.matrix(X2) / N[2]
C2 = as.data.frame(C2)
View(C2)
C = data.frame(c(0,0), c(0,0))
for (i in 1:2)
{
for (j in 1:2)
{
C[i,j] = (N[1] * C1[i,j] + N[2] * C2[i,j])/ 7
}
}
View(C)
C = inv(as.matrix(C))
View(C)
C = inv(as.matrix(C))
C = as.data.frame(C)
View(C)
p = NULL
p[1] = N[1]/nrow(dataset)
p[2] = N[2]/nrow(dataset)
p[1]
a = mu1 * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
a = mu2 * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) +
log(p[2])
f2 = a - as.vector(b)
f2 = t(f2)
View(f2)
a = mu * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu)) %*% as.matrix(C) %*% as.matrix(mu) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
a = mu1 * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
a = mu1 * as.matrix(C) %*% as.matrix(t(X1))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
a = mu1 * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) +
log(p[1])
f1 = a - as.vector(b)
f1 = t(f1)
View(f1)
# Applying LDA
library(MASS)
lda = lda(formula = Result ~ ., data = dataset)
dataset = as.data.frame(predict(lda, dataset))
View(dataset)
lda
as.matrix(C) %*% as.matrix(mu1)
dim(mu1)
dim(as.matrix(mu1))
-as.matrix(C) %*% as.matrix(mu1)
-as.matrix(C) %*% as.matrix(mu2)
p[1]
0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
w1 = -0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
w1
w1 = -0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
w1 = -as.matrix(C) %*% as.matrix(mu1)
lda
w1
w1 = -as.matrix(C) %*% as.matrix(mu)
w1
-as.matrix(C) %*% as.matrix(mu1)
-as.matrix(C) %*% as.matrix(mu2)
as.matrix(p)
dim(as.matrix(p))
View(f1)
a = mu2 * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) +
log(p[2])
f2 = as.vector(a) - b
f2 = t(f2)
View(f2)
a = mu2 * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) +
log(p[2])
dim(a)
a = as.matrix(mu2) * as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) +
log(p[2])
a = as.matrix(mu2) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) +
log(p[2])
dim(as.matrix(mu2))
dim(as.matrix(t(mu2)))
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) +
log(p[2])
dim(a)
dim(as.matrix(mu2))
dim(b)
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
dim(as.matrix(a))
f2 = as.matrix(t(a)) - as.matrix(b)
f2 = as.matrix(a) - as.matrix(b)
dim(a)
b[1]
f2 = as.matrix(a) - b[1]
a
View(f2)
f2 = as.matrix(t(a)) - b[1]
View(f2)
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = as.matrix(t(a)) - b[1]
View(f1)
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X1))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = as.matrix(t(a)) - b[1]
View(f1)
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = as.matrix(t(a)) - b[1]
dim(mu1)
dim(as.matrix(mu1))
w1 = -as.matrix(C) %*% as.matrix(mu1)
w0 = -0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f = data.frame(c(f1, f2))
View(f)
f = data.frame(c(f1), c(f2))
View(f)
summary(lda)
# Applying LDA
library(MASS)
dataset[1:2] = scale(dataset[1:2])
lda = lda(formula = Result ~ ., data = dataset)
dataset = as.data.frame(predict(lda, dataset))
dataset = read.csv('lda.csv')
dataset$Result = factor(dataset$Result, levels = c('P', 'F'),
labels = c(1, 2))
# Applying LDA
library(MASS)
dataset[1:2] = scale(dataset[1:2])
lda = lda(formula = Result ~ ., data = dataset)
dataset = as.data.frame(predict(lda, dataset))
View(dataset)
lda
-as.matrix(C) %*% as.matrix(mu1)
-0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
-as.matrix(C) %*% as.matrix(mu2)
-0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[2])
-0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
View(X)
cov(X$Curvature, X$Diameter)
View(C1)
View(C)
inv(cov(X$Curvature, X$Diameter))
View(dataset)
View(X)
X[,1:2] = scale(X[,1:2])
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = as.matrix(t(a)) - b[1]
View(f1)
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = as.matrix(t(a)) - b[1]
f = data.frame(c(f1), c(f2))
View(f)
dataset = read.csv('lda.csv')
dataset$Result = factor(dataset$Result, levels = c('P', 'F'),
labels = c(1, 2))
X = dataset[c(1,2)]
View(X)
View(dataset)
X[1,]
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X[1,]))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = a - b
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X[1,]))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X[7,]))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = a - b
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X[7,]))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X[5,]))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = a - b
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X[5,]))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X[4,]))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = a - b
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X[4,]))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X[3,]))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = a - b
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X[3,]))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
a = as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(t(X[2,]))
b = 0.5 * as.matrix(t(mu1)) %*% as.matrix(C) %*% as.matrix(mu1) + log(p[1])
f1 = a - b
a = as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(t(X[2,]))
b = 0.5 * as.matrix(t(mu2)) %*% as.matrix(C) %*% as.matrix(mu2) + log(p[2])
f2 = a - b
